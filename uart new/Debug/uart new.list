
uart new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001308  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001490  08001490  00011490  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080014d0  080014d0  000114d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080014d8  080014d8  000114d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080014dc  080014dc  000114dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  080014e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  8 .bss          00000068  20000004  20000004  00020004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000006c  2000006c  00020004  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000ac15  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000018ce  00000000  00000000  0002ac49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000020ec  00000000  00000000  0002c517  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b8  00000000  00000000  0002e608  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f0  00000000  00000000  0002eac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002ba4  00000000  00000000  0002f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000021ad  00000000  00000000  00031c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00033e01  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000c54  00000000  00000000  00033e80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001478 	.word	0x08001478

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001478 	.word	0x08001478

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_InitTick+0x24>)
{
 80004dc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e8:	f000 f888 	bl	80005fc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ec:	2200      	movs	r2, #0
 80004ee:	4621      	mov	r1, r4
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295
 80004f4:	f000 f84e 	bl	8000594 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004f8:	2000      	movs	r0, #0
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	20000000 	.word	0x20000000

08000500 <HAL_Init>:
{
 8000500:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f827 	bl	8000570 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ffd8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000528:	f000 fe70 	bl	800120c <HAL_MspInit>
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000534:	4a02      	ldr	r2, [pc, #8]	; (8000540 <HAL_IncTick+0xc>)
 8000536:	6813      	ldr	r3, [r2, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000028 	.word	0x20000028

08000544 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <HAL_GetTick+0x8>)
 8000546:	6818      	ldr	r0, [r3, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028

08000550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000552:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000554:	f7ff fff6 	bl	8000544 <HAL_GetTick>
  uint32_t wait = Delay;
 8000558:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800055a:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800055c:	4605      	mov	r5, r0
  {
     wait++;
 800055e:	bf18      	it	ne
 8000560:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000562:	f7ff ffef 	bl	8000544 <HAL_GetTick>
 8000566:	1b40      	subs	r0, r0, r5
 8000568:	42a0      	cmp	r0, r4
 800056a:	d3fa      	bcc.n	8000562 <HAL_Delay+0x12>
  {
  }
}
 800056c:	b003      	add	sp, #12
 800056e:	bd30      	pop	{r4, r5, pc}

08000570 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000572:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000574:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000578:	041b      	lsls	r3, r3, #16
 800057a:	0c1b      	lsrs	r3, r3, #16
 800057c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000580:	0200      	lsls	r0, r0, #8
 8000582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000586:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800058a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800058c:	60d3      	str	r3, [r2, #12]
 800058e:	4770      	bx	lr
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	68dc      	ldr	r4, [r3, #12]
 800059a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800059e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	bf28      	it	cs
 80005a8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005aa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	f04f 0501 	mov.w	r5, #1
 80005b0:	fa05 f303 	lsl.w	r3, r5, r3
 80005b4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b8:	bf8c      	ite	hi
 80005ba:	3c03      	subhi	r4, #3
 80005bc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005be:	4019      	ands	r1, r3
 80005c0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c2:	fa05 f404 	lsl.w	r4, r5, r4
 80005c6:	3c01      	subs	r4, #1
 80005c8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005cc:	ea42 0201 	orr.w	r2, r2, r1
 80005d0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	bfaf      	iteee	ge
 80005d6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	f000 000f 	andlt.w	r0, r0, #15
 80005de:	4b06      	ldrlt	r3, [pc, #24]	; (80005f8 <HAL_NVIC_SetPriority+0x64>)
 80005e0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	bfa5      	ittet	ge
 80005e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005e8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop
 80005f4:	e000ed00 	.word	0xe000ed00
 80005f8:	e000ed14 	.word	0xe000ed14

080005fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005fc:	3801      	subs	r0, #1
 80005fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000602:	d20a      	bcs.n	800061a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	4a07      	ldr	r2, [pc, #28]	; (8000624 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000608:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	21f0      	movs	r1, #240	; 0xf0
 800060c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000610:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000612:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000614:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800061a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e010 	.word	0xe000e010
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800062a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800062c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800062e:	bf0c      	ite	eq
 8000630:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000634:	f022 0204 	bicne.w	r2, r2, #4
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	4770      	bx	lr
 800063c:	e000e010 	.word	0xe000e010

08000640 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000640:	4770      	bx	lr

08000642 <HAL_SYSTICK_IRQHandler>:
{
 8000642:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000644:	f7ff fffc 	bl	8000640 <HAL_SYSTICK_Callback>
 8000648:	bd08      	pop	{r3, pc}
	...

0800064c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800064c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000650:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000652:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000654:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000804 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000658:	4a68      	ldr	r2, [pc, #416]	; (80007fc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800065a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000808 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800065e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000660:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000662:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000666:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000668:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800066c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000670:	45b6      	cmp	lr, r6
 8000672:	f040 80ae 	bne.w	80007d2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000676:	684c      	ldr	r4, [r1, #4]
 8000678:	f024 0710 	bic.w	r7, r4, #16
 800067c:	2f02      	cmp	r7, #2
 800067e:	d116      	bne.n	80006ae <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000680:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000684:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000688:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800068c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000690:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000694:	f04f 0c0f 	mov.w	ip, #15
 8000698:	fa0c fc0b 	lsl.w	ip, ip, fp
 800069c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006a0:	690d      	ldr	r5, [r1, #16]
 80006a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80006a6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006aa:	f8ca 5020 	str.w	r5, [sl, #32]
 80006ae:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006b2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006b4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006b8:	fa05 f50a 	lsl.w	r5, r5, sl
 80006bc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006be:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006c2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ca:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006cc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006d2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d6:	d811      	bhi.n	80006fc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80006d8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006da:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006de:	68cf      	ldr	r7, [r1, #12]
 80006e0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80006e4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80006e8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006ea:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006ec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006f0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006f4:	409f      	lsls	r7, r3
 80006f6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006fa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006fc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006fe:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000700:	688f      	ldr	r7, [r1, #8]
 8000702:	fa07 f70a 	lsl.w	r7, r7, sl
 8000706:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000708:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800070a:	00e5      	lsls	r5, r4, #3
 800070c:	d561      	bpl.n	80007d2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	f04f 0b00 	mov.w	fp, #0
 8000712:	f8cd b00c 	str.w	fp, [sp, #12]
 8000716:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800071a:	4d39      	ldr	r5, [pc, #228]	; (8000800 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000720:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000724:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000728:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800072c:	9703      	str	r7, [sp, #12]
 800072e:	9f03      	ldr	r7, [sp, #12]
 8000730:	f023 0703 	bic.w	r7, r3, #3
 8000734:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000738:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800073c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000740:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000744:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000748:	f04f 0e0f 	mov.w	lr, #15
 800074c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000750:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000752:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000756:	d043      	beq.n	80007e0 <HAL_GPIO_Init+0x194>
 8000758:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800075c:	42a8      	cmp	r0, r5
 800075e:	d041      	beq.n	80007e4 <HAL_GPIO_Init+0x198>
 8000760:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000764:	42a8      	cmp	r0, r5
 8000766:	d03f      	beq.n	80007e8 <HAL_GPIO_Init+0x19c>
 8000768:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800076c:	42a8      	cmp	r0, r5
 800076e:	d03d      	beq.n	80007ec <HAL_GPIO_Init+0x1a0>
 8000770:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000774:	42a8      	cmp	r0, r5
 8000776:	d03b      	beq.n	80007f0 <HAL_GPIO_Init+0x1a4>
 8000778:	4548      	cmp	r0, r9
 800077a:	d03b      	beq.n	80007f4 <HAL_GPIO_Init+0x1a8>
 800077c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000780:	42a8      	cmp	r0, r5
 8000782:	d039      	beq.n	80007f8 <HAL_GPIO_Init+0x1ac>
 8000784:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000788:	42a8      	cmp	r0, r5
 800078a:	bf14      	ite	ne
 800078c:	2508      	movne	r5, #8
 800078e:	2507      	moveq	r5, #7
 8000790:	fa05 f50c 	lsl.w	r5, r5, ip
 8000794:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000798:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800079a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800079c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800079e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007a2:	bf0c      	ite	eq
 80007a4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007a6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007a8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007aa:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ac:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007b0:	bf0c      	ite	eq
 80007b2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007b4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007b6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007b8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007ba:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007be:	bf0c      	ite	eq
 80007c0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007c2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007c4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007c6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007c8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007ca:	bf54      	ite	pl
 80007cc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007ce:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007d0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007d2:	3301      	adds	r3, #1
 80007d4:	2b10      	cmp	r3, #16
 80007d6:	f47f af44 	bne.w	8000662 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007da:	b005      	add	sp, #20
 80007dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007e0:	465d      	mov	r5, fp
 80007e2:	e7d5      	b.n	8000790 <HAL_GPIO_Init+0x144>
 80007e4:	2501      	movs	r5, #1
 80007e6:	e7d3      	b.n	8000790 <HAL_GPIO_Init+0x144>
 80007e8:	2502      	movs	r5, #2
 80007ea:	e7d1      	b.n	8000790 <HAL_GPIO_Init+0x144>
 80007ec:	2503      	movs	r5, #3
 80007ee:	e7cf      	b.n	8000790 <HAL_GPIO_Init+0x144>
 80007f0:	2504      	movs	r5, #4
 80007f2:	e7cd      	b.n	8000790 <HAL_GPIO_Init+0x144>
 80007f4:	2505      	movs	r5, #5
 80007f6:	e7cb      	b.n	8000790 <HAL_GPIO_Init+0x144>
 80007f8:	2506      	movs	r5, #6
 80007fa:	e7c9      	b.n	8000790 <HAL_GPIO_Init+0x144>
 80007fc:	40013c00 	.word	0x40013c00
 8000800:	40020000 	.word	0x40020000
 8000804:	40023800 	.word	0x40023800
 8000808:	40021400 	.word	0x40021400

0800080c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800080c:	b10a      	cbz	r2, 8000812 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800080e:	6181      	str	r1, [r0, #24]
 8000810:	4770      	bx	lr
 8000812:	0409      	lsls	r1, r1, #16
 8000814:	e7fb      	b.n	800080e <HAL_GPIO_WritePin+0x2>
	...

08000818 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800081a:	4604      	mov	r4, r0
 800081c:	b910      	cbnz	r0, 8000824 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 800081e:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000820:	b003      	add	sp, #12
 8000822:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000824:	6803      	ldr	r3, [r0, #0]
 8000826:	07d8      	lsls	r0, r3, #31
 8000828:	d43b      	bmi.n	80008a2 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	0799      	lsls	r1, r3, #30
 800082e:	f100 8084 	bmi.w	800093a <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	071e      	lsls	r6, r3, #28
 8000836:	f100 80c6 	bmi.w	80009c6 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	075d      	lsls	r5, r3, #29
 800083e:	d52a      	bpl.n	8000896 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	4baa      	ldr	r3, [pc, #680]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 8000846:	4dab      	ldr	r5, [pc, #684]	; (8000af4 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800084a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800084e:	641a      	str	r2, [r3, #64]	; 0x40
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800085a:	682b      	ldr	r3, [r5, #0]
 800085c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000860:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000862:	f7ff fe6f 	bl	8000544 <HAL_GetTick>
 8000866:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000868:	682b      	ldr	r3, [r5, #0]
 800086a:	05da      	lsls	r2, r3, #23
 800086c:	f140 80cd 	bpl.w	8000a0a <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000870:	68a3      	ldr	r3, [r4, #8]
 8000872:	4d9f      	ldr	r5, [pc, #636]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
 8000874:	2b01      	cmp	r3, #1
 8000876:	f040 80cf 	bne.w	8000a18 <HAL_RCC_OscConfig+0x200>
 800087a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000882:	f7ff fe5f 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000886:	4d9a      	ldr	r5, [pc, #616]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000888:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800088a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800088e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000890:	079b      	lsls	r3, r3, #30
 8000892:	f140 80e2 	bpl.w	8000a5a <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000896:	69a2      	ldr	r2, [r4, #24]
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 80e5 	bne.w	8000a68 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 800089e:	2000      	movs	r0, #0
 80008a0:	e7be      	b.n	8000820 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008a2:	4b93      	ldr	r3, [pc, #588]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	f002 020c 	and.w	r2, r2, #12
 80008aa:	2a04      	cmp	r2, #4
 80008ac:	d007      	beq.n	80008be <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008b4:	2a08      	cmp	r2, #8
 80008b6:	d10a      	bne.n	80008ce <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	025a      	lsls	r2, r3, #9
 80008bc:	d507      	bpl.n	80008ce <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008be:	4b8c      	ldr	r3, [pc, #560]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	039b      	lsls	r3, r3, #14
 80008c4:	d5b1      	bpl.n	800082a <HAL_RCC_OscConfig+0x12>
 80008c6:	6863      	ldr	r3, [r4, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1ae      	bne.n	800082a <HAL_RCC_OscConfig+0x12>
 80008cc:	e7a7      	b.n	800081e <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ce:	6863      	ldr	r3, [r4, #4]
 80008d0:	4d87      	ldr	r5, [pc, #540]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
 80008d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008d6:	d111      	bne.n	80008fc <HAL_RCC_OscConfig+0xe4>
 80008d8:	682b      	ldr	r3, [r5, #0]
 80008da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008e0:	f7ff fe30 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e4:	4d82      	ldr	r5, [pc, #520]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80008e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e8:	682b      	ldr	r3, [r5, #0]
 80008ea:	039f      	lsls	r7, r3, #14
 80008ec:	d49d      	bmi.n	800082a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ee:	f7ff fe29 	bl	8000544 <HAL_GetTick>
 80008f2:	1b80      	subs	r0, r0, r6
 80008f4:	2864      	cmp	r0, #100	; 0x64
 80008f6:	d9f7      	bls.n	80008e8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80008f8:	2003      	movs	r0, #3
 80008fa:	e791      	b.n	8000820 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000900:	d104      	bne.n	800090c <HAL_RCC_OscConfig+0xf4>
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000908:	602b      	str	r3, [r5, #0]
 800090a:	e7e5      	b.n	80008d8 <HAL_RCC_OscConfig+0xc0>
 800090c:	682a      	ldr	r2, [r5, #0]
 800090e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000912:	602a      	str	r2, [r5, #0]
 8000914:	682a      	ldr	r2, [r5, #0]
 8000916:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800091a:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1df      	bne.n	80008e0 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8000920:	f7ff fe10 	bl	8000544 <HAL_GetTick>
 8000924:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000926:	682b      	ldr	r3, [r5, #0]
 8000928:	0398      	lsls	r0, r3, #14
 800092a:	f57f af7e 	bpl.w	800082a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800092e:	f7ff fe09 	bl	8000544 <HAL_GetTick>
 8000932:	1b80      	subs	r0, r0, r6
 8000934:	2864      	cmp	r0, #100	; 0x64
 8000936:	d9f6      	bls.n	8000926 <HAL_RCC_OscConfig+0x10e>
 8000938:	e7de      	b.n	80008f8 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800093a:	4b6d      	ldr	r3, [pc, #436]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	f012 0f0c 	tst.w	r2, #12
 8000942:	d007      	beq.n	8000954 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000944:	689a      	ldr	r2, [r3, #8]
 8000946:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800094a:	2a08      	cmp	r2, #8
 800094c:	d112      	bne.n	8000974 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	0259      	lsls	r1, r3, #9
 8000952:	d40f      	bmi.n	8000974 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000954:	4b66      	ldr	r3, [pc, #408]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	0792      	lsls	r2, r2, #30
 800095a:	d503      	bpl.n	8000964 <HAL_RCC_OscConfig+0x14c>
 800095c:	68e2      	ldr	r2, [r4, #12]
 800095e:	2a01      	cmp	r2, #1
 8000960:	f47f af5d 	bne.w	800081e <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	6921      	ldr	r1, [r4, #16]
 8000968:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800096c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000970:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000972:	e75e      	b.n	8000832 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000974:	68e2      	ldr	r2, [r4, #12]
 8000976:	4b60      	ldr	r3, [pc, #384]	; (8000af8 <HAL_RCC_OscConfig+0x2e0>)
 8000978:	b1b2      	cbz	r2, 80009a8 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 800097a:	2201      	movs	r2, #1
 800097c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800097e:	f7ff fde1 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000982:	4d5b      	ldr	r5, [pc, #364]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000984:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000986:	682b      	ldr	r3, [r5, #0]
 8000988:	079b      	lsls	r3, r3, #30
 800098a:	d507      	bpl.n	800099c <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	6922      	ldr	r2, [r4, #16]
 8000990:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000994:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000998:	602b      	str	r3, [r5, #0]
 800099a:	e74a      	b.n	8000832 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800099c:	f7ff fdd2 	bl	8000544 <HAL_GetTick>
 80009a0:	1b80      	subs	r0, r0, r6
 80009a2:	2802      	cmp	r0, #2
 80009a4:	d9ef      	bls.n	8000986 <HAL_RCC_OscConfig+0x16e>
 80009a6:	e7a7      	b.n	80008f8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 80009a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009aa:	f7ff fdcb 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009ae:	4d50      	ldr	r5, [pc, #320]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80009b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009b2:	682b      	ldr	r3, [r5, #0]
 80009b4:	079f      	lsls	r7, r3, #30
 80009b6:	f57f af3c 	bpl.w	8000832 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ba:	f7ff fdc3 	bl	8000544 <HAL_GetTick>
 80009be:	1b80      	subs	r0, r0, r6
 80009c0:	2802      	cmp	r0, #2
 80009c2:	d9f6      	bls.n	80009b2 <HAL_RCC_OscConfig+0x19a>
 80009c4:	e798      	b.n	80008f8 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009c6:	6962      	ldr	r2, [r4, #20]
 80009c8:	4b4c      	ldr	r3, [pc, #304]	; (8000afc <HAL_RCC_OscConfig+0x2e4>)
 80009ca:	b17a      	cbz	r2, 80009ec <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009d0:	f7ff fdb8 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d4:	4d46      	ldr	r5, [pc, #280]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80009d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009da:	0798      	lsls	r0, r3, #30
 80009dc:	f53f af2d 	bmi.w	800083a <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e0:	f7ff fdb0 	bl	8000544 <HAL_GetTick>
 80009e4:	1b80      	subs	r0, r0, r6
 80009e6:	2802      	cmp	r0, #2
 80009e8:	d9f6      	bls.n	80009d8 <HAL_RCC_OscConfig+0x1c0>
 80009ea:	e785      	b.n	80008f8 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 80009ec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009ee:	f7ff fda9 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009f2:	4d3f      	ldr	r5, [pc, #252]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80009f4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009f6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009f8:	0799      	lsls	r1, r3, #30
 80009fa:	f57f af1e 	bpl.w	800083a <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009fe:	f7ff fda1 	bl	8000544 <HAL_GetTick>
 8000a02:	1b80      	subs	r0, r0, r6
 8000a04:	2802      	cmp	r0, #2
 8000a06:	d9f6      	bls.n	80009f6 <HAL_RCC_OscConfig+0x1de>
 8000a08:	e776      	b.n	80008f8 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a0a:	f7ff fd9b 	bl	8000544 <HAL_GetTick>
 8000a0e:	1b80      	subs	r0, r0, r6
 8000a10:	2802      	cmp	r0, #2
 8000a12:	f67f af29 	bls.w	8000868 <HAL_RCC_OscConfig+0x50>
 8000a16:	e76f      	b.n	80008f8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a18:	2b05      	cmp	r3, #5
 8000a1a:	d104      	bne.n	8000a26 <HAL_RCC_OscConfig+0x20e>
 8000a1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	672b      	str	r3, [r5, #112]	; 0x70
 8000a24:	e729      	b.n	800087a <HAL_RCC_OscConfig+0x62>
 8000a26:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a28:	f022 0201 	bic.w	r2, r2, #1
 8000a2c:	672a      	str	r2, [r5, #112]	; 0x70
 8000a2e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a30:	f022 0204 	bic.w	r2, r2, #4
 8000a34:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f47f af23 	bne.w	8000882 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8000a3c:	f7ff fd82 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a40:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a44:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a46:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a48:	0798      	lsls	r0, r3, #30
 8000a4a:	f57f af24 	bpl.w	8000896 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a4e:	f7ff fd79 	bl	8000544 <HAL_GetTick>
 8000a52:	1b80      	subs	r0, r0, r6
 8000a54:	42b8      	cmp	r0, r7
 8000a56:	d9f6      	bls.n	8000a46 <HAL_RCC_OscConfig+0x22e>
 8000a58:	e74e      	b.n	80008f8 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a5a:	f7ff fd73 	bl	8000544 <HAL_GetTick>
 8000a5e:	1b80      	subs	r0, r0, r6
 8000a60:	42b8      	cmp	r0, r7
 8000a62:	f67f af14 	bls.w	800088e <HAL_RCC_OscConfig+0x76>
 8000a66:	e747      	b.n	80008f8 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a68:	4d21      	ldr	r5, [pc, #132]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
 8000a6a:	68ab      	ldr	r3, [r5, #8]
 8000a6c:	f003 030c 	and.w	r3, r3, #12
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	f43f aed4 	beq.w	800081e <HAL_RCC_OscConfig+0x6>
 8000a76:	4e22      	ldr	r6, [pc, #136]	; (8000b00 <HAL_RCC_OscConfig+0x2e8>)
 8000a78:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a7a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a7c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a7e:	d12a      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8000a80:	f7ff fd60 	bl	8000544 <HAL_GetTick>
 8000a84:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a86:	682b      	ldr	r3, [r5, #0]
 8000a88:	0199      	lsls	r1, r3, #6
 8000a8a:	d41e      	bmi.n	8000aca <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a8c:	6a22      	ldr	r2, [r4, #32]
 8000a8e:	69e3      	ldr	r3, [r4, #28]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a94:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000aa0:	4c13      	ldr	r4, [pc, #76]	; (8000af0 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000aa2:	0852      	lsrs	r2, r2, #1
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aaa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000aac:	2301      	movs	r3, #1
 8000aae:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ab0:	f7ff fd48 	bl	8000544 <HAL_GetTick>
 8000ab4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ab6:	6823      	ldr	r3, [r4, #0]
 8000ab8:	019a      	lsls	r2, r3, #6
 8000aba:	f53f aef0 	bmi.w	800089e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000abe:	f7ff fd41 	bl	8000544 <HAL_GetTick>
 8000ac2:	1b40      	subs	r0, r0, r5
 8000ac4:	2802      	cmp	r0, #2
 8000ac6:	d9f6      	bls.n	8000ab6 <HAL_RCC_OscConfig+0x29e>
 8000ac8:	e716      	b.n	80008f8 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aca:	f7ff fd3b 	bl	8000544 <HAL_GetTick>
 8000ace:	1bc0      	subs	r0, r0, r7
 8000ad0:	2802      	cmp	r0, #2
 8000ad2:	d9d8      	bls.n	8000a86 <HAL_RCC_OscConfig+0x26e>
 8000ad4:	e710      	b.n	80008f8 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8000ad6:	f7ff fd35 	bl	8000544 <HAL_GetTick>
 8000ada:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	019b      	lsls	r3, r3, #6
 8000ae0:	f57f aedd 	bpl.w	800089e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae4:	f7ff fd2e 	bl	8000544 <HAL_GetTick>
 8000ae8:	1b00      	subs	r0, r0, r4
 8000aea:	2802      	cmp	r0, #2
 8000aec:	d9f6      	bls.n	8000adc <HAL_RCC_OscConfig+0x2c4>
 8000aee:	e703      	b.n	80008f8 <HAL_RCC_OscConfig+0xe0>
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40007000 	.word	0x40007000
 8000af8:	42470000 	.word	0x42470000
 8000afc:	42470e80 	.word	0x42470e80
 8000b00:	42470060 	.word	0x42470060

08000b04 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b04:	4913      	ldr	r1, [pc, #76]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b06:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b08:	688b      	ldr	r3, [r1, #8]
 8000b0a:	f003 030c 	and.w	r3, r3, #12
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	d003      	beq.n	8000b1a <HAL_RCC_GetSysClockFreq+0x16>
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	d003      	beq.n	8000b1e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b16:	4810      	ldr	r0, [pc, #64]	; (8000b58 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b18:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b1a:	4810      	ldr	r0, [pc, #64]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x58>)
 8000b1c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b1e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b20:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b22:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b24:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b28:	bf14      	ite	ne
 8000b2a:	480c      	ldrne	r0, [pc, #48]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b2c:	480a      	ldreq	r0, [pc, #40]	; (8000b58 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b2e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b32:	bf18      	it	ne
 8000b34:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b3a:	fba1 0100 	umull	r0, r1, r1, r0
 8000b3e:	f7ff fb43 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b52:	bd08      	pop	{r3, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	00f42400 	.word	0x00f42400
 8000b5c:	017d7840 	.word	0x017d7840

08000b60 <HAL_RCC_ClockConfig>:
{
 8000b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b64:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b66:	4604      	mov	r4, r0
 8000b68:	b910      	cbnz	r0, 8000b70 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b70:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <HAL_RCC_ClockConfig+0x124>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	f002 020f 	and.w	r2, r2, #15
 8000b78:	428a      	cmp	r2, r1
 8000b7a:	d328      	bcc.n	8000bce <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b7c:	6821      	ldr	r1, [r4, #0]
 8000b7e:	078f      	lsls	r7, r1, #30
 8000b80:	d42d      	bmi.n	8000bde <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b82:	07c8      	lsls	r0, r1, #31
 8000b84:	d440      	bmi.n	8000c08 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b86:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <HAL_RCC_ClockConfig+0x124>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	f002 020f 	and.w	r2, r2, #15
 8000b8e:	4295      	cmp	r5, r2
 8000b90:	d366      	bcc.n	8000c60 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b92:	6822      	ldr	r2, [r4, #0]
 8000b94:	0751      	lsls	r1, r2, #29
 8000b96:	d46c      	bmi.n	8000c72 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b98:	0713      	lsls	r3, r2, #28
 8000b9a:	d507      	bpl.n	8000bac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b9c:	4a3a      	ldr	r2, [pc, #232]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000b9e:	6921      	ldr	r1, [r4, #16]
 8000ba0:	6893      	ldr	r3, [r2, #8]
 8000ba2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ba6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000baa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bac:	f7ff ffaa 	bl	8000b04 <HAL_RCC_GetSysClockFreq>
 8000bb0:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000bb2:	4a36      	ldr	r2, [pc, #216]	; (8000c8c <HAL_RCC_ClockConfig+0x12c>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bba:	5cd3      	ldrb	r3, [r2, r3]
 8000bbc:	40d8      	lsrs	r0, r3
 8000bbe:	4b34      	ldr	r3, [pc, #208]	; (8000c90 <HAL_RCC_ClockConfig+0x130>)
 8000bc0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f7ff fc88 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000bc8:	2000      	movs	r0, #0
 8000bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 030f 	and.w	r3, r3, #15
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	d1c6      	bne.n	8000b6a <HAL_RCC_ClockConfig+0xa>
 8000bdc:	e7ce      	b.n	8000b7c <HAL_RCC_ClockConfig+0x1c>
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000be0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000be4:	bf1e      	ittt	ne
 8000be6:	689a      	ldrne	r2, [r3, #8]
 8000be8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000bec:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bee:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bf0:	bf42      	ittt	mi
 8000bf2:	689a      	ldrmi	r2, [r3, #8]
 8000bf4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000bf8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	68a0      	ldr	r0, [r4, #8]
 8000bfe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c02:	4302      	orrs	r2, r0
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	e7bc      	b.n	8000b82 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c08:	6862      	ldr	r2, [r4, #4]
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000c0c:	2a01      	cmp	r2, #1
 8000c0e:	d11d      	bne.n	8000c4c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c16:	d0a8      	beq.n	8000b6a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c18:	4e1b      	ldr	r6, [pc, #108]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000c1a:	68b3      	ldr	r3, [r6, #8]
 8000c1c:	f023 0303 	bic.w	r3, r3, #3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c24:	f7ff fc8e 	bl	8000544 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c28:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c2c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c2e:	68b3      	ldr	r3, [r6, #8]
 8000c30:	6862      	ldr	r2, [r4, #4]
 8000c32:	f003 030c 	and.w	r3, r3, #12
 8000c36:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c3a:	d0a4      	beq.n	8000b86 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c3c:	f7ff fc82 	bl	8000544 <HAL_GetTick>
 8000c40:	1bc0      	subs	r0, r0, r7
 8000c42:	4540      	cmp	r0, r8
 8000c44:	d9f3      	bls.n	8000c2e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c46:	2003      	movs	r0, #3
}
 8000c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c4c:	1e91      	subs	r1, r2, #2
 8000c4e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c50:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c52:	d802      	bhi.n	8000c5a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c54:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c58:	e7dd      	b.n	8000c16 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5a:	f013 0f02 	tst.w	r3, #2
 8000c5e:	e7da      	b.n	8000c16 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c60:	b2ea      	uxtb	r2, r5
 8000c62:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	429d      	cmp	r5, r3
 8000c6c:	f47f af7d 	bne.w	8000b6a <HAL_RCC_ClockConfig+0xa>
 8000c70:	e78f      	b.n	8000b92 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c72:	4905      	ldr	r1, [pc, #20]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000c74:	68e0      	ldr	r0, [r4, #12]
 8000c76:	688b      	ldr	r3, [r1, #8]
 8000c78:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	608b      	str	r3, [r1, #8]
 8000c80:	e78a      	b.n	8000b98 <HAL_RCC_ClockConfig+0x38>
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	08001490 	.word	0x08001490
 8000c90:	20000000 	.word	0x20000000

08000c94 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c94:	4b01      	ldr	r3, [pc, #4]	; (8000c9c <HAL_RCC_GetHCLKFreq+0x8>)
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000000 	.word	0x20000000

08000ca0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
 8000cac:	4a03      	ldr	r2, [pc, #12]	; (8000cbc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000cae:	6810      	ldr	r0, [r2, #0]
}
 8000cb0:	40d8      	lsrs	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	080014a0 	.word	0x080014a0
 8000cbc:	20000000 	.word	0x20000000

08000cc0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	4a03      	ldr	r2, [pc, #12]	; (8000cdc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000cce:	6810      	ldr	r0, [r2, #0]
}
 8000cd0:	40d8      	lsrs	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	080014a0 	.word	0x080014a0
 8000cdc:	20000000 	.word	0x20000000

08000ce0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000ce4:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000ce6:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000ce8:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000cea:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000cec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000cf0:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000cf2:	6133      	str	r3, [r6, #16]
{
 8000cf4:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000cf6:	6883      	ldr	r3, [r0, #8]
 8000cf8:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8000cfa:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000cfc:	4303      	orrs	r3, r0
 8000cfe:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000d00:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d04:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000d06:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d0a:	430b      	orrs	r3, r1
 8000d0c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000d0e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000d10:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000d12:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8000d18:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d1a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000d1e:	6173      	str	r3, [r6, #20]
 8000d20:	4b7a      	ldr	r3, [pc, #488]	; (8000f0c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d22:	d17c      	bne.n	8000e1e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d003      	beq.n	8000d30 <UART_SetConfig+0x50>
 8000d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d2c:	429e      	cmp	r6, r3
 8000d2e:	d144      	bne.n	8000dba <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000d30:	f7ff ffc6 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 8000d34:	2519      	movs	r5, #25
 8000d36:	fb05 f300 	mul.w	r3, r5, r0
 8000d3a:	6860      	ldr	r0, [r4, #4]
 8000d3c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000d40:	0040      	lsls	r0, r0, #1
 8000d42:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d46:	fbb3 f3f9 	udiv	r3, r3, r9
 8000d4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000d4e:	f7ff ffb7 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 8000d52:	6863      	ldr	r3, [r4, #4]
 8000d54:	4368      	muls	r0, r5
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fbb0 f7f3 	udiv	r7, r0, r3
 8000d5c:	f7ff ffb0 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 8000d60:	6863      	ldr	r3, [r4, #4]
 8000d62:	4368      	muls	r0, r5
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d6a:	fbb3 f3f9 	udiv	r3, r3, r9
 8000d6e:	fb09 7313 	mls	r3, r9, r3, r7
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	3332      	adds	r3, #50	; 0x32
 8000d76:	fbb3 f3f9 	udiv	r3, r3, r9
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000d80:	f7ff ff9e 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 8000d84:	6862      	ldr	r2, [r4, #4]
 8000d86:	4368      	muls	r0, r5
 8000d88:	0052      	lsls	r2, r2, #1
 8000d8a:	fbb0 faf2 	udiv	sl, r0, r2
 8000d8e:	f7ff ff97 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000d92:	6863      	ldr	r3, [r4, #4]
 8000d94:	4368      	muls	r0, r5
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d9c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000da0:	fb09 a313 	mls	r3, r9, r3, sl
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	3332      	adds	r3, #50	; 0x32
 8000da8:	fbb3 f3f9 	udiv	r3, r3, r9
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000db2:	443b      	add	r3, r7
 8000db4:	60b3      	str	r3, [r6, #8]
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000dba:	f7ff ff71 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8000dbe:	2519      	movs	r5, #25
 8000dc0:	fb05 f300 	mul.w	r3, r5, r0
 8000dc4:	6860      	ldr	r0, [r4, #4]
 8000dc6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000dca:	0040      	lsls	r0, r0, #1
 8000dcc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000dd0:	fbb3 f3f9 	udiv	r3, r3, r9
 8000dd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000dd8:	f7ff ff62 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8000ddc:	6863      	ldr	r3, [r4, #4]
 8000dde:	4368      	muls	r0, r5
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fbb0 f7f3 	udiv	r7, r0, r3
 8000de6:	f7ff ff5b 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8000dea:	6863      	ldr	r3, [r4, #4]
 8000dec:	4368      	muls	r0, r5
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000df4:	fbb3 f3f9 	udiv	r3, r3, r9
 8000df8:	fb09 7313 	mls	r3, r9, r3, r7
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	3332      	adds	r3, #50	; 0x32
 8000e00:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000e0a:	f7ff ff49 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8000e0e:	6862      	ldr	r2, [r4, #4]
 8000e10:	4368      	muls	r0, r5
 8000e12:	0052      	lsls	r2, r2, #1
 8000e14:	fbb0 faf2 	udiv	sl, r0, r2
 8000e18:	f7ff ff42 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8000e1c:	e7b9      	b.n	8000d92 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	d002      	beq.n	8000e28 <UART_SetConfig+0x148>
 8000e22:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <UART_SetConfig+0x230>)
 8000e24:	429e      	cmp	r6, r3
 8000e26:	d140      	bne.n	8000eaa <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000e28:	f7ff ff4a 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 8000e2c:	6867      	ldr	r7, [r4, #4]
 8000e2e:	2519      	movs	r5, #25
 8000e30:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000e34:	fb05 f300 	mul.w	r3, r5, r0
 8000e38:	00bf      	lsls	r7, r7, #2
 8000e3a:	fbb3 f3f7 	udiv	r3, r3, r7
 8000e3e:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e42:	011f      	lsls	r7, r3, #4
 8000e44:	f7ff ff3c 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 8000e48:	6863      	ldr	r3, [r4, #4]
 8000e4a:	4368      	muls	r0, r5
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	fbb0 f8f3 	udiv	r8, r0, r3
 8000e52:	f7ff ff35 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 8000e56:	6863      	ldr	r3, [r4, #4]
 8000e58:	4368      	muls	r0, r5
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e60:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e64:	fb09 8313 	mls	r3, r9, r3, r8
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	3332      	adds	r3, #50	; 0x32
 8000e6c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e70:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000e74:	f7ff ff24 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 8000e78:	6862      	ldr	r2, [r4, #4]
 8000e7a:	4368      	muls	r0, r5
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	fbb0 faf2 	udiv	sl, r0, r2
 8000e82:	f7ff ff1d 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e86:	6863      	ldr	r3, [r4, #4]
 8000e88:	4368      	muls	r0, r5
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e90:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e94:	fb09 a313 	mls	r3, r9, r3, sl
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	3332      	adds	r3, #50	; 0x32
 8000e9c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ea0:	f003 030f 	and.w	r3, r3, #15
 8000ea4:	ea43 0308 	orr.w	r3, r3, r8
 8000ea8:	e783      	b.n	8000db2 <UART_SetConfig+0xd2>
 8000eaa:	f7ff fef9 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8000eae:	6867      	ldr	r7, [r4, #4]
 8000eb0:	2519      	movs	r5, #25
 8000eb2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000eb6:	fb05 f300 	mul.w	r3, r5, r0
 8000eba:	00bf      	lsls	r7, r7, #2
 8000ebc:	fbb3 f3f7 	udiv	r3, r3, r7
 8000ec0:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ec4:	011f      	lsls	r7, r3, #4
 8000ec6:	f7ff feeb 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8000eca:	6863      	ldr	r3, [r4, #4]
 8000ecc:	4368      	muls	r0, r5
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	fbb0 f8f3 	udiv	r8, r0, r3
 8000ed4:	f7ff fee4 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8000ed8:	6863      	ldr	r3, [r4, #4]
 8000eda:	4368      	muls	r0, r5
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ee2:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ee6:	fb09 8313 	mls	r3, r9, r3, r8
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	3332      	adds	r3, #50	; 0x32
 8000eee:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ef2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000ef6:	f7ff fed3 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8000efa:	6862      	ldr	r2, [r4, #4]
 8000efc:	4368      	muls	r0, r5
 8000efe:	0092      	lsls	r2, r2, #2
 8000f00:	fbb0 faf2 	udiv	sl, r0, r2
 8000f04:	f7ff fecc 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8000f08:	e7bd      	b.n	8000e86 <UART_SetConfig+0x1a6>
 8000f0a:	bf00      	nop
 8000f0c:	40011000 	.word	0x40011000
 8000f10:	40011400 	.word	0x40011400

08000f14 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f16:	4604      	mov	r4, r0
 8000f18:	460e      	mov	r6, r1
 8000f1a:	4617      	mov	r7, r2
 8000f1c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000f1e:	6821      	ldr	r1, [r4, #0]
 8000f20:	680b      	ldr	r3, [r1, #0]
 8000f22:	ea36 0303 	bics.w	r3, r6, r3
 8000f26:	d101      	bne.n	8000f2c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000f28:	2000      	movs	r0, #0
}
 8000f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000f2c:	1c6b      	adds	r3, r5, #1
 8000f2e:	d0f7      	beq.n	8000f20 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f30:	b995      	cbnz	r5, 8000f58 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f3c:	695a      	ldr	r2, [r3, #20]
 8000f3e:	f022 0201 	bic.w	r2, r2, #1
 8000f42:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000f44:	2320      	movs	r3, #32
 8000f46:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000f4a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000f54:	2003      	movs	r0, #3
 8000f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f58:	f7ff faf4 	bl	8000544 <HAL_GetTick>
 8000f5c:	1bc0      	subs	r0, r0, r7
 8000f5e:	4285      	cmp	r5, r0
 8000f60:	d2dd      	bcs.n	8000f1e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000f62:	e7e6      	b.n	8000f32 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000f64 <HAL_UART_Init>:
{
 8000f64:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000f66:	4604      	mov	r4, r0
 8000f68:	b340      	cbz	r0, 8000fbc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000f6a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f72:	b91b      	cbnz	r3, 8000f7c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000f74:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000f78:	f000 f978 	bl	800126c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8000f7c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f7e:	2324      	movs	r3, #36	; 0x24
 8000f80:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000f84:	68d3      	ldr	r3, [r2, #12]
 8000f86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f8a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f7ff fea7 	bl	8000ce0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f9c:	695a      	ldr	r2, [r3, #20]
 8000f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fa2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000faa:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fac:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8000fae:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fb0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000fb2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000fb6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000fba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fbc:	2001      	movs	r0, #1
}
 8000fbe:	bd10      	pop	{r4, pc}

08000fc0 <HAL_UART_Transmit>:
{
 8000fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8000fc6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000fca:	2b20      	cmp	r3, #32
{
 8000fcc:	4604      	mov	r4, r0
 8000fce:	460d      	mov	r5, r1
 8000fd0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8000fd2:	d14f      	bne.n	8001074 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8000fd4:	2900      	cmp	r1, #0
 8000fd6:	d04a      	beq.n	800106e <HAL_UART_Transmit+0xae>
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	d048      	beq.n	800106e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8000fdc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d047      	beq.n	8001074 <HAL_UART_Transmit+0xb4>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000fee:	2321      	movs	r3, #33	; 0x21
 8000ff0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000ff4:	f7ff faa6 	bl	8000544 <HAL_GetTick>
    huart->TxXferSize = Size;
 8000ff8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8000ffc:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8000ffe:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001002:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001004:	b29b      	uxth	r3, r3
 8001006:	b96b      	cbnz	r3, 8001024 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4632      	mov	r2, r6
 800100c:	2140      	movs	r1, #64	; 0x40
 800100e:	4620      	mov	r0, r4
 8001010:	f7ff ff80 	bl	8000f14 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001014:	b9b0      	cbnz	r0, 8001044 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001016:	2320      	movs	r3, #32
 8001018:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800101c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001024:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001026:	3b01      	subs	r3, #1
 8001028:	b29b      	uxth	r3, r3
 800102a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800102c:	68a3      	ldr	r3, [r4, #8]
 800102e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001032:	4632      	mov	r2, r6
 8001034:	463b      	mov	r3, r7
 8001036:	f04f 0180 	mov.w	r1, #128	; 0x80
 800103a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800103c:	d10e      	bne.n	800105c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800103e:	f7ff ff69 	bl	8000f14 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001042:	b110      	cbz	r0, 800104a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001044:	2003      	movs	r0, #3
 8001046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800104a:	882b      	ldrh	r3, [r5, #0]
 800104c:	6822      	ldr	r2, [r4, #0]
 800104e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001052:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001054:	6923      	ldr	r3, [r4, #16]
 8001056:	b943      	cbnz	r3, 800106a <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001058:	3502      	adds	r5, #2
 800105a:	e7d2      	b.n	8001002 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800105c:	f7ff ff5a 	bl	8000f14 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001060:	2800      	cmp	r0, #0
 8001062:	d1ef      	bne.n	8001044 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	782a      	ldrb	r2, [r5, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	3501      	adds	r5, #1
 800106c:	e7c9      	b.n	8001002 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800106e:	2001      	movs	r0, #1
 8001070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001074:	2002      	movs	r0, #2
}
 8001076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800107c <varToStrConv>:

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

uint8_t* varToStrConv(uint32_t v_var_u32)
{
 800107c:	b510      	push	{r4, lr}
    static uint8_t p_string_u8[6];
    int8_t cnt;
    for(cnt = 3; cnt>=0;cnt--)
    {
    p_string_u8[cnt] = ((v_var_u32 % 10)+48);
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <varToStrConv+0x24>)
{
 8001080:	2303      	movs	r3, #3
    p_string_u8[cnt] = ((v_var_u32 % 10)+48);
 8001082:	220a      	movs	r2, #10
 8001084:	fbb0 f4f2 	udiv	r4, r0, r2
 8001088:	fb02 0014 	mls	r0, r2, r4, r0
 800108c:	3030      	adds	r0, #48	; 0x30
 800108e:	5458      	strb	r0, [r3, r1]
    for(cnt = 3; cnt>=0;cnt--)
 8001090:	f113 33ff 	adds.w	r3, r3, #4294967295
    v_var_u32 /= 10;
 8001094:	4620      	mov	r0, r4
    for(cnt = 3; cnt>=0;cnt--)
 8001096:	d2f5      	bcs.n	8001084 <varToStrConv+0x8>
    }
    p_string_u8[4]='\n';
 8001098:	710a      	strb	r2, [r1, #4]
    return p_string_u8;
}
 800109a:	4801      	ldr	r0, [pc, #4]	; (80010a0 <varToStrConv+0x24>)
 800109c:	bd10      	pop	{r4, pc}
 800109e:	bf00      	nop
 80010a0:	20000020 	.word	0x20000020

080010a4 <SystemClock_Config>:

}
/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80010a4:	b510      	push	{r4, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	4a21      	ldr	r2, [pc, #132]	; (8001130 <SystemClock_Config+0x8c>)
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80010b0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80010b4:	6411      	str	r1, [r2, #64]	; 0x40
 80010b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010b8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80010bc:	9201      	str	r2, [sp, #4]
 80010be:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c0:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <SystemClock_Config+0x90>)
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	6811      	ldr	r1, [r2, #0]
 80010c6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80010ca:	6011      	str	r1, [r2, #0]
 80010cc:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ce:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80010d4:	9202      	str	r2, [sp, #8]
 80010d6:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d8:	2202      	movs	r2, #2
 80010da:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	2201      	movs	r2, #1
 80010de:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80010e2:	2210      	movs	r2, #16
 80010e4:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e6:	f7ff fb97 	bl	8000818 <HAL_RCC_OscConfig>
 80010ea:	4601      	mov	r1, r0
 80010ec:	b100      	cbz	r0, 80010f0 <SystemClock_Config+0x4c>
 80010ee:	e7fe      	b.n	80010ee <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010f2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f6:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f8:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010fa:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010fe:	f7ff fd2f 	bl	8000b60 <HAL_RCC_ClockConfig>
 8001102:	4604      	mov	r4, r0
 8001104:	b100      	cbz	r0, 8001108 <SystemClock_Config+0x64>
 8001106:	e7fe      	b.n	8001106 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001108:	f7ff fdc4 	bl	8000c94 <HAL_RCC_GetHCLKFreq>
 800110c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001110:	fbb0 f0f3 	udiv	r0, r0, r3
 8001114:	f7ff fa72 	bl	80005fc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001118:	2004      	movs	r0, #4
 800111a:	f7ff fa85 	bl	8000628 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800111e:	4622      	mov	r2, r4
 8001120:	4621      	mov	r1, r4
 8001122:	f04f 30ff 	mov.w	r0, #4294967295
 8001126:	f7ff fa35 	bl	8000594 <HAL_NVIC_SetPriority>
}
 800112a:	b014      	add	sp, #80	; 0x50
 800112c:	bd10      	pop	{r4, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <main>:
{
 8001138:	b530      	push	{r4, r5, lr}
 800113a:	b089      	sub	sp, #36	; 0x24
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113c:	2500      	movs	r5, #0
  HAL_Init();
 800113e:	f7ff f9df 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 8001142:	f7ff ffaf 	bl	80010a4 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001146:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <main+0xc4>)
 8001148:	9500      	str	r5, [sp, #0]
 800114a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800114c:	482c      	ldr	r0, [pc, #176]	; (8001200 <main+0xc8>)
  huart2.Instance = USART2;
 800114e:	4c2d      	ldr	r4, [pc, #180]	; (8001204 <main+0xcc>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001150:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001154:	631a      	str	r2, [r3, #48]	; 0x30
 8001156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001158:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800115c:	9200      	str	r2, [sp, #0]
 800115e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	9501      	str	r5, [sp, #4]
 8001162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001164:	f042 0201 	orr.w	r2, r2, #1
 8001168:	631a      	str	r2, [r3, #48]	; 0x30
 800116a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800116c:	f002 0201 	and.w	r2, r2, #1
 8001170:	9201      	str	r2, [sp, #4]
 8001172:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	9502      	str	r5, [sp, #8]
 8001176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001178:	f042 0208 	orr.w	r2, r2, #8
 800117c:	631a      	str	r2, [r3, #48]	; 0x30
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001184:	462a      	mov	r2, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001188:	f44f 5140 	mov.w	r1, #12288	; 0x3000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800118c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800118e:	f7ff fb3d 	bl	800080c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001192:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001196:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001198:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119c:	4818      	ldr	r0, [pc, #96]	; (8001200 <main+0xc8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a4:	f7ff fa52 	bl	800064c <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 80011a8:	4a17      	ldr	r2, [pc, #92]	; (8001208 <main+0xd0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	60a5      	str	r5, [r4, #8]
  huart2.Init.BaudRate = 115200;
 80011ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011b0:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b4:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b6:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b8:	60e5      	str	r5, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ba:	6125      	str	r5, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011bc:	61a5      	str	r5, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011be:	61e5      	str	r5, [r4, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c0:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c2:	f7ff fecf 	bl	8000f64 <HAL_UART_Init>
 80011c6:	4605      	mov	r5, r0
 80011c8:	b100      	cbz	r0, 80011cc <main+0x94>
 80011ca:	e7fe      	b.n	80011ca <main+0x92>
 HAL_UART_MspInit(&huart2);
 80011cc:	4620      	mov	r0, r4
 80011ce:	f000 f84d 	bl	800126c <HAL_UART_MspInit>
             i++;
 80011d2:	3501      	adds	r5, #1
             itoa(i, tx_data ,10);
 80011d4:	a903      	add	r1, sp, #12
 80011d6:	220a      	movs	r2, #10
 80011d8:	4628      	mov	r0, r5
 80011da:	f000 f90b 	bl	80013f4 <itoa>
	      	 HAL_UART_Transmit(&huart2, varToStrConv(i), 5, 1000);
 80011de:	4628      	mov	r0, r5
 80011e0:	f7ff ff4c 	bl	800107c <varToStrConv>
 80011e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e8:	4601      	mov	r1, r0
 80011ea:	2205      	movs	r2, #5
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7ff fee7 	bl	8000fc0 <HAL_UART_Transmit>
	         HAL_Delay(100);
 80011f2:	2064      	movs	r0, #100	; 0x64
 80011f4:	f7ff f9ac 	bl	8000550 <HAL_Delay>
 80011f8:	e7eb      	b.n	80011d2 <main+0x9a>
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	2000002c 	.word	0x2000002c
 8001208:	40004400 	.word	0x40004400

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120e:	2003      	movs	r0, #3
 8001210:	f7ff f9ae 	bl	8000570 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	4611      	mov	r1, r2
 8001218:	f06f 000b 	mvn.w	r0, #11
 800121c:	f7ff f9ba 	bl	8000594 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	4611      	mov	r1, r2
 8001224:	f06f 000a 	mvn.w	r0, #10
 8001228:	f7ff f9b4 	bl	8000594 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	4611      	mov	r1, r2
 8001230:	f06f 0009 	mvn.w	r0, #9
 8001234:	f7ff f9ae 	bl	8000594 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	4611      	mov	r1, r2
 800123c:	f06f 0004 	mvn.w	r0, #4
 8001240:	f7ff f9a8 	bl	8000594 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	4611      	mov	r1, r2
 8001248:	f06f 0003 	mvn.w	r0, #3
 800124c:	f7ff f9a2 	bl	8000594 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	4611      	mov	r1, r2
 8001254:	f06f 0001 	mvn.w	r0, #1
 8001258:	f7ff f99c 	bl	8000594 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	4611      	mov	r1, r2
 8001260:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001264:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001268:	f7ff b994 	b.w	8000594 <HAL_NVIC_SetPriority>

0800126c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800126c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800126e:	6802      	ldr	r2, [r0, #0]
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_UART_MspInit+0x44>)
 8001272:	429a      	cmp	r2, r3
 8001274:	d119      	bne.n	80012aa <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	480e      	ldr	r0, [pc, #56]	; (80012b8 <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800127e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001280:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001290:	230c      	movs	r3, #12
 8001292:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001298:	2301      	movs	r3, #1
 800129a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012a2:	2307      	movs	r3, #7
 80012a4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f7ff f9d1 	bl	800064c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012aa:	b007      	add	sp, #28
 80012ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80012b0:	40004400 	.word	0x40004400
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000

080012bc <NMI_Handler>:
 80012bc:	4770      	bx	lr

080012be <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80012be:	e7fe      	b.n	80012be <HardFault_Handler>

080012c0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler>

080012c2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler>

080012c4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler>

080012c6 <SVC_Handler>:
 80012c6:	4770      	bx	lr

080012c8 <DebugMon_Handler>:
 80012c8:	4770      	bx	lr

080012ca <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80012ca:	4770      	bx	lr

080012cc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80012cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ce:	f7ff f931 	bl	8000534 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80012d6:	f7ff b9b4 	b.w	8000642 <HAL_SYSTICK_IRQHandler>
	...

080012dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012dc:	490f      	ldr	r1, [pc, #60]	; (800131c <SystemInit+0x40>)
 80012de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80012e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <SystemInit+0x44>)
 80012ec:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012ee:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80012f0:	f042 0201 	orr.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80012f6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80012fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001302:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <SystemInit+0x48>)
 8001306:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800130e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001310:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001312:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001316:	608b      	str	r3, [r1, #8]
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	40023800 	.word	0x40023800
 8001324:	24003010 	.word	0x24003010

08001328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001360 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800132c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800132e:	e003      	b.n	8001338 <LoopCopyDataInit>

08001330 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001332:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001334:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001336:	3104      	adds	r1, #4

08001338 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800133c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800133e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001340:	d3f6      	bcc.n	8001330 <CopyDataInit>
  ldr  r2, =_sbss
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001344:	e002      	b.n	800134c <LoopFillZerobss>

08001346 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001346:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001348:	f842 3b04 	str.w	r3, [r2], #4

0800134c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800134e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001350:	d3f9      	bcc.n	8001346 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001352:	f7ff ffc3 	bl	80012dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001356:	f000 f811 	bl	800137c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135a:	f7ff feed 	bl	8001138 <main>
  bx  lr    
 800135e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001360:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001364:	080014e0 	.word	0x080014e0
  ldr  r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800136c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001370:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001374:	2000006c 	.word	0x2000006c

08001378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC_IRQHandler>
	...

0800137c <__libc_init_array>:
 800137c:	b570      	push	{r4, r5, r6, lr}
 800137e:	4e0d      	ldr	r6, [pc, #52]	; (80013b4 <__libc_init_array+0x38>)
 8001380:	4c0d      	ldr	r4, [pc, #52]	; (80013b8 <__libc_init_array+0x3c>)
 8001382:	1ba4      	subs	r4, r4, r6
 8001384:	10a4      	asrs	r4, r4, #2
 8001386:	2500      	movs	r5, #0
 8001388:	42a5      	cmp	r5, r4
 800138a:	d109      	bne.n	80013a0 <__libc_init_array+0x24>
 800138c:	4e0b      	ldr	r6, [pc, #44]	; (80013bc <__libc_init_array+0x40>)
 800138e:	4c0c      	ldr	r4, [pc, #48]	; (80013c0 <__libc_init_array+0x44>)
 8001390:	f000 f872 	bl	8001478 <_init>
 8001394:	1ba4      	subs	r4, r4, r6
 8001396:	10a4      	asrs	r4, r4, #2
 8001398:	2500      	movs	r5, #0
 800139a:	42a5      	cmp	r5, r4
 800139c:	d105      	bne.n	80013aa <__libc_init_array+0x2e>
 800139e:	bd70      	pop	{r4, r5, r6, pc}
 80013a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013a4:	4798      	blx	r3
 80013a6:	3501      	adds	r5, #1
 80013a8:	e7ee      	b.n	8001388 <__libc_init_array+0xc>
 80013aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013ae:	4798      	blx	r3
 80013b0:	3501      	adds	r5, #1
 80013b2:	e7f2      	b.n	800139a <__libc_init_array+0x1e>
 80013b4:	080014d8 	.word	0x080014d8
 80013b8:	080014d8 	.word	0x080014d8
 80013bc:	080014d8 	.word	0x080014d8
 80013c0:	080014dc 	.word	0x080014dc

080013c4 <__itoa>:
 80013c4:	1e93      	subs	r3, r2, #2
 80013c6:	2b22      	cmp	r3, #34	; 0x22
 80013c8:	b510      	push	{r4, lr}
 80013ca:	460c      	mov	r4, r1
 80013cc:	d904      	bls.n	80013d8 <__itoa+0x14>
 80013ce:	2300      	movs	r3, #0
 80013d0:	700b      	strb	r3, [r1, #0]
 80013d2:	461c      	mov	r4, r3
 80013d4:	4620      	mov	r0, r4
 80013d6:	bd10      	pop	{r4, pc}
 80013d8:	2a0a      	cmp	r2, #10
 80013da:	d109      	bne.n	80013f0 <__itoa+0x2c>
 80013dc:	2800      	cmp	r0, #0
 80013de:	da07      	bge.n	80013f0 <__itoa+0x2c>
 80013e0:	232d      	movs	r3, #45	; 0x2d
 80013e2:	700b      	strb	r3, [r1, #0]
 80013e4:	4240      	negs	r0, r0
 80013e6:	2101      	movs	r1, #1
 80013e8:	4421      	add	r1, r4
 80013ea:	f000 f805 	bl	80013f8 <__utoa>
 80013ee:	e7f1      	b.n	80013d4 <__itoa+0x10>
 80013f0:	2100      	movs	r1, #0
 80013f2:	e7f9      	b.n	80013e8 <__itoa+0x24>

080013f4 <itoa>:
 80013f4:	f7ff bfe6 	b.w	80013c4 <__itoa>

080013f8 <__utoa>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4c1e      	ldr	r4, [pc, #120]	; (8001474 <__utoa+0x7c>)
 80013fc:	b08b      	sub	sp, #44	; 0x2c
 80013fe:	4603      	mov	r3, r0
 8001400:	460f      	mov	r7, r1
 8001402:	466d      	mov	r5, sp
 8001404:	f104 0e20 	add.w	lr, r4, #32
 8001408:	6820      	ldr	r0, [r4, #0]
 800140a:	6861      	ldr	r1, [r4, #4]
 800140c:	462e      	mov	r6, r5
 800140e:	c603      	stmia	r6!, {r0, r1}
 8001410:	3408      	adds	r4, #8
 8001412:	4574      	cmp	r4, lr
 8001414:	4635      	mov	r5, r6
 8001416:	d1f7      	bne.n	8001408 <__utoa+0x10>
 8001418:	7921      	ldrb	r1, [r4, #4]
 800141a:	7131      	strb	r1, [r6, #4]
 800141c:	1e91      	subs	r1, r2, #2
 800141e:	6820      	ldr	r0, [r4, #0]
 8001420:	6030      	str	r0, [r6, #0]
 8001422:	2922      	cmp	r1, #34	; 0x22
 8001424:	f04f 0100 	mov.w	r1, #0
 8001428:	d904      	bls.n	8001434 <__utoa+0x3c>
 800142a:	7039      	strb	r1, [r7, #0]
 800142c:	460f      	mov	r7, r1
 800142e:	4638      	mov	r0, r7
 8001430:	b00b      	add	sp, #44	; 0x2c
 8001432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001434:	1e78      	subs	r0, r7, #1
 8001436:	4606      	mov	r6, r0
 8001438:	fbb3 f5f2 	udiv	r5, r3, r2
 800143c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8001440:	fb02 3315 	mls	r3, r2, r5, r3
 8001444:	4473      	add	r3, lr
 8001446:	1c4c      	adds	r4, r1, #1
 8001448:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800144c:	f806 3f01 	strb.w	r3, [r6, #1]!
 8001450:	462b      	mov	r3, r5
 8001452:	b965      	cbnz	r5, 800146e <__utoa+0x76>
 8001454:	553d      	strb	r5, [r7, r4]
 8001456:	187a      	adds	r2, r7, r1
 8001458:	1acc      	subs	r4, r1, r3
 800145a:	42a3      	cmp	r3, r4
 800145c:	dae7      	bge.n	800142e <__utoa+0x36>
 800145e:	7844      	ldrb	r4, [r0, #1]
 8001460:	7815      	ldrb	r5, [r2, #0]
 8001462:	f800 5f01 	strb.w	r5, [r0, #1]!
 8001466:	3301      	adds	r3, #1
 8001468:	f802 4901 	strb.w	r4, [r2], #-1
 800146c:	e7f4      	b.n	8001458 <__utoa+0x60>
 800146e:	4621      	mov	r1, r4
 8001470:	e7e2      	b.n	8001438 <__utoa+0x40>
 8001472:	bf00      	nop
 8001474:	080014a8 	.word	0x080014a8

08001478 <_init>:
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147a:	bf00      	nop
 800147c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800147e:	bc08      	pop	{r3}
 8001480:	469e      	mov	lr, r3
 8001482:	4770      	bx	lr

08001484 <_fini>:
 8001484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001486:	bf00      	nop
 8001488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800148a:	bc08      	pop	{r3}
 800148c:	469e      	mov	lr, r3
 800148e:	4770      	bx	lr
